// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: grpc/proto/wallet.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_CashbookVerifyFinalTransaction_FullMethodName   = "/wallet.WalletService/CashbookVerifyFinalTransaction"
	WalletService_CashbookFetchLastApproved_FullMethodName        = "/wallet.WalletService/CashbookFetchLastApproved"
	WalletService_CashbookFetchSalesReport_FullMethodName         = "/wallet.WalletService/CashbookFetchSalesReport"
	WalletService_CashbookFetchReport_FullMethodName              = "/wallet.WalletService/CashbookFetchReport"
	WalletService_CashbookHandleReport_FullMethodName             = "/wallet.WalletService/CashbookHandleReport"
	WalletService_CashbookFetchMonthlyShopReport_FullMethodName   = "/wallet.WalletService/CashbookFetchMonthlyShopReport"
	WalletService_CurrentReport_FullMethodName                    = "/wallet.WalletService/CurrentReport"
	WalletService_CashbookApproveExpense_FullMethodName           = "/wallet.WalletService/CashbookApproveExpense"
	WalletService_CashbookCreateExpense_FullMethodName            = "/wallet.WalletService/CashbookCreateExpense"
	WalletService_CashbookFindAllExpense_FullMethodName           = "/wallet.WalletService/CashbookFindAllExpense"
	WalletService_CashbookFindOneExpense_FullMethodName           = "/wallet.WalletService/CashbookFindOneExpense"
	WalletService_CashbookDeleteOneExpense_FullMethodName         = "/wallet.WalletService/CashbookDeleteOneExpense"
	WalletService_CashbookUpdateOneExpense_FullMethodName         = "/wallet.WalletService/CashbookUpdateOneExpense"
	WalletService_CashbookFindAllBranchExpense_FullMethodName     = "/wallet.WalletService/CashbookFindAllBranchExpense"
	WalletService_CashbookCreateExpenseType_FullMethodName        = "/wallet.WalletService/CashbookCreateExpenseType"
	WalletService_CashbookFindAllExpenseType_FullMethodName       = "/wallet.WalletService/CashbookFindAllExpenseType"
	WalletService_CashbookApproveCashIn_FullMethodName            = "/wallet.WalletService/CashbookApproveCashIn"
	WalletService_CashbookCreateCashIn_FullMethodName             = "/wallet.WalletService/CashbookCreateCashIn"
	WalletService_CashbookUpdateCashIn_FullMethodName             = "/wallet.WalletService/CashbookUpdateCashIn"
	WalletService_CashbookDeleteOneCashIn_FullMethodName          = "/wallet.WalletService/CashbookDeleteOneCashIn"
	WalletService_CashbookFindOneCashIn_FullMethodName            = "/wallet.WalletService/CashbookFindOneCashIn"
	WalletService_CashbookFindAllCashIn_FullMethodName            = "/wallet.WalletService/CashbookFindAllCashIn"
	WalletService_CashbookFindAllBranchCashIn_FullMethodName      = "/wallet.WalletService/CashbookFindAllBranchCashIn"
	WalletService_FindAllBranchApprovedCashinWDate_FullMethodName = "/wallet.WalletService/FindAllBranchApprovedCashinWDate"
	WalletService_FindAllBranchPendingCashinWDate_FullMethodName  = "/wallet.WalletService/FindAllBranchPendingCashinWDate"
	WalletService_CashbookApproveCashOut_FullMethodName           = "/wallet.WalletService/CashbookApproveCashOut"
	WalletService_CashbookCreateCashOut_FullMethodName            = "/wallet.WalletService/CashbookCreateCashOut"
	WalletService_CashbookUpdateCashOut_FullMethodName            = "/wallet.WalletService/CashbookUpdateCashOut"
	WalletService_CashbookDeleteOneCashOut_FullMethodName         = "/wallet.WalletService/CashbookDeleteOneCashOut"
	WalletService_CashbookFindOneCashOut_FullMethodName           = "/wallet.WalletService/CashbookFindOneCashOut"
	WalletService_CashbookFindAllCashOut_FullMethodName           = "/wallet.WalletService/CashbookFindAllCashOut"
	WalletService_CashbookFindAllBranchCashOut_FullMethodName     = "/wallet.WalletService/CashbookFindAllBranchCashOut"
	WalletService_HandleCreatePawaPay_FullMethodName              = "/wallet.WalletService/HandleCreatePawaPay"
	WalletService_HandleCreateBulkPawaPay_FullMethodName          = "/wallet.WalletService/HandleCreateBulkPawaPay"
	WalletService_HandleFetchPawaPay_FullMethodName               = "/wallet.WalletService/HandleFetchPawaPay"
	WalletService_HandlePawaPayResendCallback_FullMethodName      = "/wallet.WalletService/HandlePawaPayResendCallback"
	WalletService_HandlePawaPayBalances_FullMethodName            = "/wallet.WalletService/HandlePawaPayBalances"
	WalletService_HandlePawaPayCountryBalances_FullMethodName     = "/wallet.WalletService/HandlePawaPayCountryBalances"
	WalletService_HandlePawaPayPredCorr_FullMethodName            = "/wallet.WalletService/HandlePawaPayPredCorr"
	WalletService_HandlePawaPayToolkit_FullMethodName             = "/wallet.WalletService/HandlePawaPayToolkit"
	WalletService_HandlePawaPayActiveConf_FullMethodName          = "/wallet.WalletService/HandlePawaPayActiveConf"
	WalletService_CreateVirtualAccount_FullMethodName             = "/wallet.WalletService/CreateVirtualAccount"
	WalletService_WayabankAccountEnquiry_FullMethodName           = "/wallet.WalletService/WayabankAccountEnquiry"
	WalletService_StkDepositNotification_FullMethodName           = "/wallet.WalletService/StkDepositNotification"
	WalletService_StkWithdrawNotification_FullMethodName          = "/wallet.WalletService/StkWithdrawNotification"
	WalletService_StkStatusNotification_FullMethodName            = "/wallet.WalletService/StkStatusNotification"
	WalletService_StkRegisterUrl_FullMethodName                   = "/wallet.WalletService/StkRegisterUrl"
	WalletService_HandleWayaQuickInit_FullMethodName              = "/wallet.WalletService/HandleWayaQuickInit"
	WalletService_HandleWayaQuickVerify_FullMethodName            = "/wallet.WalletService/HandleWayaQuickVerify"
	WalletService_FetchUsersWithdrawal_FullMethodName             = "/wallet.WalletService/FetchUsersWithdrawal"
	WalletService_GetBalance_FullMethodName                       = "/wallet.WalletService/GetBalance"
	WalletService_CreateWallet_FullMethodName                     = "/wallet.WalletService/CreateWallet"
	WalletService_FetchBetRange_FullMethodName                    = "/wallet.WalletService/FetchBetRange"
	WalletService_FetchPlayerDeposit_FullMethodName               = "/wallet.WalletService/FetchPlayerDeposit"
	WalletService_FetchDepositRange_FullMethodName                = "/wallet.WalletService/FetchDepositRange"
	WalletService_FetchDepositCount_FullMethodName                = "/wallet.WalletService/FetchDepositCount"
	WalletService_CreditUser_FullMethodName                       = "/wallet.WalletService/CreditUser"
	WalletService_AwardBonusWinning_FullMethodName                = "/wallet.WalletService/AwardBonusWinning"
	WalletService_DebitUser_FullMethodName                        = "/wallet.WalletService/DebitUser"
	WalletService_InititateDeposit_FullMethodName                 = "/wallet.WalletService/InititateDeposit"
	WalletService_VerifyDeposit_FullMethodName                    = "/wallet.WalletService/VerifyDeposit"
	WalletService_RequestWithdrawal_FullMethodName                = "/wallet.WalletService/RequestWithdrawal"
	WalletService_VerifyBankAccount_FullMethodName                = "/wallet.WalletService/VerifyBankAccount"
	WalletService_ListBanks_FullMethodName                        = "/wallet.WalletService/ListBanks"
	WalletService_GetTransactions_FullMethodName                  = "/wallet.WalletService/GetTransactions"
	WalletService_GetPaymentMethods_FullMethodName                = "/wallet.WalletService/GetPaymentMethods"
	WalletService_SavePaymentMethod_FullMethodName                = "/wallet.WalletService/SavePaymentMethod"
	WalletService_PaystackWebhook_FullMethodName                  = "/wallet.WalletService/PaystackWebhook"
	WalletService_MonnifyWebhook_FullMethodName                   = "/wallet.WalletService/MonnifyWebhook"
	WalletService_OpayDepositWebhook_FullMethodName               = "/wallet.WalletService/OpayDepositWebhook"
	WalletService_OpayLookUpWebhook_FullMethodName                = "/wallet.WalletService/OpayLookUpWebhook"
	WalletService_ListWithdrawals_FullMethodName                  = "/wallet.WalletService/ListWithdrawals"
	WalletService_ListDeposits_FullMethodName                     = "/wallet.WalletService/ListDeposits"
	WalletService_UserTransactions_FullMethodName                 = "/wallet.WalletService/UserTransactions"
	WalletService_UpdateWithdrawal_FullMethodName                 = "/wallet.WalletService/UpdateWithdrawal"
	WalletService_GetPlayerWalletData_FullMethodName              = "/wallet.WalletService/GetPlayerWalletData"
	WalletService_DeletePlayerData_FullMethodName                 = "/wallet.WalletService/DeletePlayerData"
	WalletService_GetUserAccounts_FullMethodName                  = "/wallet.WalletService/GetUserAccounts"
	WalletService_GetNetworkBalance_FullMethodName                = "/wallet.WalletService/GetNetworkBalance"
	WalletService_GetMoneyTransaction_FullMethodName              = "/wallet.WalletService/GetMoneyTransaction"
	WalletService_GetSystemTransaction_FullMethodName             = "/wallet.WalletService/GetSystemTransaction"
	WalletService_WalletTransfer_FullMethodName                   = "/wallet.WalletService/WalletTransfer"
	WalletService_ValidateDepositCode_FullMethodName              = "/wallet.WalletService/ValidateDepositCode"
	WalletService_ProcessShopDeposit_FullMethodName               = "/wallet.WalletService/ProcessShopDeposit"
	WalletService_ValidateWithdrawalCode_FullMethodName           = "/wallet.WalletService/ValidateWithdrawalCode"
	WalletService_ProcessShopWithdrawal_FullMethodName            = "/wallet.WalletService/ProcessShopWithdrawal"
	WalletService_DebitAgentBalance_FullMethodName                = "/wallet.WalletService/DebitAgentBalance"
	WalletService_FlutterWaveWebhook_FullMethodName               = "/wallet.WalletService/FlutterWaveWebhook"
	WalletService_KorapayWebhook_FullMethodName                   = "/wallet.WalletService/KorapayWebhook"
	WalletService_TigoWebhook_FullMethodName                      = "/wallet.WalletService/TigoWebhook"
	WalletService_PawapayCallback_FullMethodName                  = "/wallet.WalletService/PawapayCallback"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	CashbookVerifyFinalTransaction(ctx context.Context, in *FetchLastApprovedRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	CashbookFetchLastApproved(ctx context.Context, in *FetchLastApprovedRequest, opts ...grpc.CallOption) (*LastApprovedResponse, error)
	CashbookFetchSalesReport(ctx context.Context, in *FetchSalesReportRequest, opts ...grpc.CallOption) (*SalesReportResponseArray, error)
	CashbookFetchReport(ctx context.Context, in *FetchReportRequest, opts ...grpc.CallOption) (*FetchReportResponse, error)
	CashbookHandleReport(ctx context.Context, in *HandleReportRequest, opts ...grpc.CallOption) (*LastApprovedResponseObj, error)
	CashbookFetchMonthlyShopReport(ctx context.Context, in *FetchReportRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	CurrentReport(ctx context.Context, in *FetchReportRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	CashbookApproveExpense(ctx context.Context, in *CashbookApproveExpenseRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error)
	CashbookCreateExpense(ctx context.Context, in *CashbookCreateExpenseRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error)
	CashbookFindAllExpense(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ExpenseRepeatedResponse, error)
	CashbookFindOneExpense(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error)
	CashbookDeleteOneExpense(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error)
	CashbookUpdateOneExpense(ctx context.Context, in *CashbookCreateExpenseRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error)
	CashbookFindAllBranchExpense(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*ExpenseRepeatedResponse, error)
	CashbookCreateExpenseType(ctx context.Context, in *CashbookCreateExpenseTypeRequest, opts ...grpc.CallOption) (*ExpenseTypeSingleResponse, error)
	CashbookFindAllExpenseType(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ExpenseTypeRepeatedResponse, error)
	CashbookApproveCashIn(ctx context.Context, in *CashbookApproveCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookCreateCashIn(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookUpdateCashIn(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookDeleteOneCashIn(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookFindOneCashIn(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookFindAllCashIn(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error)
	CashbookFindAllBranchCashIn(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error)
	FindAllBranchApprovedCashinWDate(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error)
	FindAllBranchPendingCashinWDate(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error)
	CashbookApproveCashOut(ctx context.Context, in *CashbookApproveCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookCreateCashOut(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookUpdateCashOut(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookDeleteOneCashOut(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookFindOneCashOut(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error)
	CashbookFindAllCashOut(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error)
	CashbookFindAllBranchCashOut(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error)
	HandleCreatePawaPay(ctx context.Context, in *CreatePawapayRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	HandleCreateBulkPawaPay(ctx context.Context, in *CreateBulkPawapayRequest, opts ...grpc.CallOption) (*CommonResponseArray, error)
	HandleFetchPawaPay(ctx context.Context, in *FetchPawapayRequest, opts ...grpc.CallOption) (*CommonResponseArray, error)
	HandlePawaPayResendCallback(ctx context.Context, in *FetchPawapayRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	HandlePawaPayBalances(ctx context.Context, in *PawapayCountryRequest, opts ...grpc.CallOption) (*CommonResponseArray, error)
	HandlePawaPayCountryBalances(ctx context.Context, in *PawapayCountryRequest, opts ...grpc.CallOption) (*CommonResponseArray, error)
	HandlePawaPayPredCorr(ctx context.Context, in *PawapayPredCorrRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	HandlePawaPayToolkit(ctx context.Context, in *PawapayToolkitRequest, opts ...grpc.CallOption) (*CommonResponseArray, error)
	HandlePawaPayActiveConf(ctx context.Context, in *PawapayCountryRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	CreateVirtualAccount(ctx context.Context, in *WayaBankRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	WayabankAccountEnquiry(ctx context.Context, in *WayaBankRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	StkDepositNotification(ctx context.Context, in *StkTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	StkWithdrawNotification(ctx context.Context, in *StkTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	StkStatusNotification(ctx context.Context, in *StkTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	StkRegisterUrl(ctx context.Context, in *StkRegisterUrlRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	HandleWayaQuickInit(ctx context.Context, in *WayaQuickRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	HandleWayaQuickVerify(ctx context.Context, in *WayaQuickRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	FetchUsersWithdrawal(ctx context.Context, in *FetchUsersWithdrawalRequest, opts ...grpc.CallOption) (*CommonResponseArray, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	FetchBetRange(ctx context.Context, in *FetchBetRangeRequest, opts ...grpc.CallOption) (*FetchBetRangeResponse, error)
	FetchPlayerDeposit(ctx context.Context, in *FetchPlayerDepositRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	FetchDepositRange(ctx context.Context, in *FetchDepositRangeRequest, opts ...grpc.CallOption) (*FetchDepositRangeResponse, error)
	FetchDepositCount(ctx context.Context, in *FetchDepositCountRequest, opts ...grpc.CallOption) (*FetchDepositCountResponse, error)
	CreditUser(ctx context.Context, in *CreditUserRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	AwardBonusWinning(ctx context.Context, in *CreditUserRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	DebitUser(ctx context.Context, in *DebitUserRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	InititateDeposit(ctx context.Context, in *InitiateDepositRequest, opts ...grpc.CallOption) (*InitiateDepositResponse, error)
	VerifyDeposit(ctx context.Context, in *VerifyDepositRequest, opts ...grpc.CallOption) (*VerifyDepositResponse, error)
	RequestWithdrawal(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	VerifyBankAccount(ctx context.Context, in *VerifyBankAccountRequest, opts ...grpc.CallOption) (*VerifyBankAccountResponse, error)
	ListBanks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CommonResponseArray, error)
	GetTransactions(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetPaymentMethods(ctx context.Context, in *GetPaymentMethodRequest, opts ...grpc.CallOption) (*GetPaymentMethodResponse, error)
	SavePaymentMethod(ctx context.Context, in *PaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error)
	PaystackWebhook(ctx context.Context, in *PaystackWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error)
	MonnifyWebhook(ctx context.Context, in *MonnifyWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error)
	OpayDepositWebhook(ctx context.Context, in *OpayWebhookRequest, opts ...grpc.CallOption) (*OpayWebhookResponse, error)
	OpayLookUpWebhook(ctx context.Context, in *OpayWebhookRequest, opts ...grpc.CallOption) (*OpayWebhookResponse, error)
	ListWithdrawals(ctx context.Context, in *ListWithdrawalRequests, opts ...grpc.CallOption) (*ListWithdrawalRequestResponse, error)
	ListDeposits(ctx context.Context, in *ListDepositRequests, opts ...grpc.CallOption) (*PaginationResponse, error)
	UserTransactions(ctx context.Context, in *UserTransactionRequest, opts ...grpc.CallOption) (*UserTransactionResponse, error)
	UpdateWithdrawal(ctx context.Context, in *UpdateWithdrawalRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	GetPlayerWalletData(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*PlayerWalletData, error)
	DeletePlayerData(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	GetUserAccounts(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetUserAccountsResponse, error)
	GetNetworkBalance(ctx context.Context, in *GetNetworkBalanceRequest, opts ...grpc.CallOption) (*GetNetworkBalanceResponse, error)
	GetMoneyTransaction(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	GetSystemTransaction(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	// RETAIL SERVICES
	WalletTransfer(ctx context.Context, in *WalletTransferRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	ValidateDepositCode(ctx context.Context, in *ValidateTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	ProcessShopDeposit(ctx context.Context, in *ProcessRetailTransaction, opts ...grpc.CallOption) (*CommonResponseObj, error)
	ValidateWithdrawalCode(ctx context.Context, in *ValidateTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	ProcessShopWithdrawal(ctx context.Context, in *ProcessRetailTransaction, opts ...grpc.CallOption) (*CommonResponseObj, error)
	DebitAgentBalance(ctx context.Context, in *DebitUserRequest, opts ...grpc.CallOption) (*CommonResponseObj, error)
	FlutterWaveWebhook(ctx context.Context, in *FlutterwaveWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error)
	KorapayWebhook(ctx context.Context, in *KoraPayWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error)
	TigoWebhook(ctx context.Context, in *TigoWebhookRequest, opts ...grpc.CallOption) (*TigoResponse, error)
	PawapayCallback(ctx context.Context, in *PawapayRequest, opts ...grpc.CallOption) (*PawapayResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) CashbookVerifyFinalTransaction(ctx context.Context, in *FetchLastApprovedRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_CashbookVerifyFinalTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFetchLastApproved(ctx context.Context, in *FetchLastApprovedRequest, opts ...grpc.CallOption) (*LastApprovedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LastApprovedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFetchLastApproved_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFetchSalesReport(ctx context.Context, in *FetchSalesReportRequest, opts ...grpc.CallOption) (*SalesReportResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesReportResponseArray)
	err := c.cc.Invoke(ctx, WalletService_CashbookFetchSalesReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFetchReport(ctx context.Context, in *FetchReportRequest, opts ...grpc.CallOption) (*FetchReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchReportResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFetchReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookHandleReport(ctx context.Context, in *HandleReportRequest, opts ...grpc.CallOption) (*LastApprovedResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LastApprovedResponseObj)
	err := c.cc.Invoke(ctx, WalletService_CashbookHandleReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFetchMonthlyShopReport(ctx context.Context, in *FetchReportRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_CashbookFetchMonthlyShopReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CurrentReport(ctx context.Context, in *FetchReportRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_CurrentReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookApproveExpense(ctx context.Context, in *CashbookApproveExpenseRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookApproveExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookCreateExpense(ctx context.Context, in *CashbookCreateExpenseRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookCreateExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindAllExpense(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ExpenseRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindAllExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindOneExpense(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindOneExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookDeleteOneExpense(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookDeleteOneExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookUpdateOneExpense(ctx context.Context, in *CashbookCreateExpenseRequest, opts ...grpc.CallOption) (*ExpenseSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookUpdateOneExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindAllBranchExpense(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*ExpenseRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindAllBranchExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookCreateExpenseType(ctx context.Context, in *CashbookCreateExpenseTypeRequest, opts ...grpc.CallOption) (*ExpenseTypeSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseTypeSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookCreateExpenseType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindAllExpenseType(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ExpenseTypeRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseTypeRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindAllExpenseType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookApproveCashIn(ctx context.Context, in *CashbookApproveCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookApproveCashIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookCreateCashIn(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookCreateCashIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookUpdateCashIn(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookUpdateCashIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookDeleteOneCashIn(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookDeleteOneCashIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindOneCashIn(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindOneCashIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindAllCashIn(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindAllCashIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindAllBranchCashIn(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindAllBranchCashIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FindAllBranchApprovedCashinWDate(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_FindAllBranchApprovedCashinWDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FindAllBranchPendingCashinWDate(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_FindAllBranchPendingCashinWDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookApproveCashOut(ctx context.Context, in *CashbookApproveCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookApproveCashOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookCreateCashOut(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookCreateCashOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookUpdateCashOut(ctx context.Context, in *CashbookCreateCashInOutRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookUpdateCashOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookDeleteOneCashOut(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookDeleteOneCashOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindOneCashOut(ctx context.Context, in *CashbookIdRequest, opts ...grpc.CallOption) (*CashInOutSingleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutSingleResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindOneCashOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindAllCashOut(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindAllCashOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CashbookFindAllBranchCashOut(ctx context.Context, in *BranchRequest, opts ...grpc.CallOption) (*CashInOutRepeatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashInOutRepeatedResponse)
	err := c.cc.Invoke(ctx, WalletService_CashbookFindAllBranchCashOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandleCreatePawaPay(ctx context.Context, in *CreatePawapayRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_HandleCreatePawaPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandleCreateBulkPawaPay(ctx context.Context, in *CreateBulkPawapayRequest, opts ...grpc.CallOption) (*CommonResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseArray)
	err := c.cc.Invoke(ctx, WalletService_HandleCreateBulkPawaPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandleFetchPawaPay(ctx context.Context, in *FetchPawapayRequest, opts ...grpc.CallOption) (*CommonResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseArray)
	err := c.cc.Invoke(ctx, WalletService_HandleFetchPawaPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandlePawaPayResendCallback(ctx context.Context, in *FetchPawapayRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_HandlePawaPayResendCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandlePawaPayBalances(ctx context.Context, in *PawapayCountryRequest, opts ...grpc.CallOption) (*CommonResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseArray)
	err := c.cc.Invoke(ctx, WalletService_HandlePawaPayBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandlePawaPayCountryBalances(ctx context.Context, in *PawapayCountryRequest, opts ...grpc.CallOption) (*CommonResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseArray)
	err := c.cc.Invoke(ctx, WalletService_HandlePawaPayCountryBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandlePawaPayPredCorr(ctx context.Context, in *PawapayPredCorrRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_HandlePawaPayPredCorr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandlePawaPayToolkit(ctx context.Context, in *PawapayToolkitRequest, opts ...grpc.CallOption) (*CommonResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseArray)
	err := c.cc.Invoke(ctx, WalletService_HandlePawaPayToolkit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandlePawaPayActiveConf(ctx context.Context, in *PawapayCountryRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_HandlePawaPayActiveConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateVirtualAccount(ctx context.Context, in *WayaBankRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_CreateVirtualAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WayabankAccountEnquiry(ctx context.Context, in *WayaBankRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_WayabankAccountEnquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StkDepositNotification(ctx context.Context, in *StkTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_StkDepositNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StkWithdrawNotification(ctx context.Context, in *StkTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_StkWithdrawNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StkStatusNotification(ctx context.Context, in *StkTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_StkStatusNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StkRegisterUrl(ctx context.Context, in *StkRegisterUrlRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_StkRegisterUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandleWayaQuickInit(ctx context.Context, in *WayaQuickRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_HandleWayaQuickInit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HandleWayaQuickVerify(ctx context.Context, in *WayaQuickRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_HandleWayaQuickVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FetchUsersWithdrawal(ctx context.Context, in *FetchUsersWithdrawalRequest, opts ...grpc.CallOption) (*CommonResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseArray)
	err := c.cc.Invoke(ctx, WalletService_FetchUsersWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, WalletService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, WalletService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FetchBetRange(ctx context.Context, in *FetchBetRangeRequest, opts ...grpc.CallOption) (*FetchBetRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchBetRangeResponse)
	err := c.cc.Invoke(ctx, WalletService_FetchBetRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FetchPlayerDeposit(ctx context.Context, in *FetchPlayerDepositRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, WalletService_FetchPlayerDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FetchDepositRange(ctx context.Context, in *FetchDepositRangeRequest, opts ...grpc.CallOption) (*FetchDepositRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchDepositRangeResponse)
	err := c.cc.Invoke(ctx, WalletService_FetchDepositRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FetchDepositCount(ctx context.Context, in *FetchDepositCountRequest, opts ...grpc.CallOption) (*FetchDepositCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchDepositCountResponse)
	err := c.cc.Invoke(ctx, WalletService_FetchDepositCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreditUser(ctx context.Context, in *CreditUserRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, WalletService_CreditUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AwardBonusWinning(ctx context.Context, in *CreditUserRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, WalletService_AwardBonusWinning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DebitUser(ctx context.Context, in *DebitUserRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, WalletService_DebitUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) InititateDeposit(ctx context.Context, in *InitiateDepositRequest, opts ...grpc.CallOption) (*InitiateDepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateDepositResponse)
	err := c.cc.Invoke(ctx, WalletService_InititateDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) VerifyDeposit(ctx context.Context, in *VerifyDepositRequest, opts ...grpc.CallOption) (*VerifyDepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyDepositResponse)
	err := c.cc.Invoke(ctx, WalletService_VerifyDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RequestWithdrawal(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, WalletService_RequestWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) VerifyBankAccount(ctx context.Context, in *VerifyBankAccountRequest, opts ...grpc.CallOption) (*VerifyBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyBankAccountResponse)
	err := c.cc.Invoke(ctx, WalletService_VerifyBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListBanks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CommonResponseArray, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseArray)
	err := c.cc.Invoke(ctx, WalletService_ListBanks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactions(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, WalletService_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetPaymentMethods(ctx context.Context, in *GetPaymentMethodRequest, opts ...grpc.CallOption) (*GetPaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentMethodResponse)
	err := c.cc.Invoke(ctx, WalletService_GetPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SavePaymentMethod(ctx context.Context, in *PaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethodResponse)
	err := c.cc.Invoke(ctx, WalletService_SavePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PaystackWebhook(ctx context.Context, in *PaystackWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebhookResponse)
	err := c.cc.Invoke(ctx, WalletService_PaystackWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) MonnifyWebhook(ctx context.Context, in *MonnifyWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebhookResponse)
	err := c.cc.Invoke(ctx, WalletService_MonnifyWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) OpayDepositWebhook(ctx context.Context, in *OpayWebhookRequest, opts ...grpc.CallOption) (*OpayWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpayWebhookResponse)
	err := c.cc.Invoke(ctx, WalletService_OpayDepositWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) OpayLookUpWebhook(ctx context.Context, in *OpayWebhookRequest, opts ...grpc.CallOption) (*OpayWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpayWebhookResponse)
	err := c.cc.Invoke(ctx, WalletService_OpayLookUpWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListWithdrawals(ctx context.Context, in *ListWithdrawalRequests, opts ...grpc.CallOption) (*ListWithdrawalRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawalRequestResponse)
	err := c.cc.Invoke(ctx, WalletService_ListWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListDeposits(ctx context.Context, in *ListDepositRequests, opts ...grpc.CallOption) (*PaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginationResponse)
	err := c.cc.Invoke(ctx, WalletService_ListDeposits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) UserTransactions(ctx context.Context, in *UserTransactionRequest, opts ...grpc.CallOption) (*UserTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserTransactionResponse)
	err := c.cc.Invoke(ctx, WalletService_UserTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) UpdateWithdrawal(ctx context.Context, in *UpdateWithdrawalRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_UpdateWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetPlayerWalletData(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*PlayerWalletData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerWalletData)
	err := c.cc.Invoke(ctx, WalletService_GetPlayerWalletData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeletePlayerData(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_DeletePlayerData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetUserAccounts(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetUserAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAccountsResponse)
	err := c.cc.Invoke(ctx, WalletService_GetUserAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetNetworkBalance(ctx context.Context, in *GetNetworkBalanceRequest, opts ...grpc.CallOption) (*GetNetworkBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkBalanceResponse)
	err := c.cc.Invoke(ctx, WalletService_GetNetworkBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetMoneyTransaction(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_GetMoneyTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetSystemTransaction(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_GetSystemTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WalletTransfer(ctx context.Context, in *WalletTransferRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_WalletTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ValidateDepositCode(ctx context.Context, in *ValidateTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_ValidateDepositCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ProcessShopDeposit(ctx context.Context, in *ProcessRetailTransaction, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_ProcessShopDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ValidateWithdrawalCode(ctx context.Context, in *ValidateTransactionRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_ValidateWithdrawalCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ProcessShopWithdrawal(ctx context.Context, in *ProcessRetailTransaction, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_ProcessShopWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DebitAgentBalance(ctx context.Context, in *DebitUserRequest, opts ...grpc.CallOption) (*CommonResponseObj, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponseObj)
	err := c.cc.Invoke(ctx, WalletService_DebitAgentBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FlutterWaveWebhook(ctx context.Context, in *FlutterwaveWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebhookResponse)
	err := c.cc.Invoke(ctx, WalletService_FlutterWaveWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) KorapayWebhook(ctx context.Context, in *KoraPayWebhookRequest, opts ...grpc.CallOption) (*WebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebhookResponse)
	err := c.cc.Invoke(ctx, WalletService_KorapayWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) TigoWebhook(ctx context.Context, in *TigoWebhookRequest, opts ...grpc.CallOption) (*TigoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TigoResponse)
	err := c.cc.Invoke(ctx, WalletService_TigoWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PawapayCallback(ctx context.Context, in *PawapayRequest, opts ...grpc.CallOption) (*PawapayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PawapayResponse)
	err := c.cc.Invoke(ctx, WalletService_PawapayCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	CashbookVerifyFinalTransaction(context.Context, *FetchLastApprovedRequest) (*CommonResponseObj, error)
	CashbookFetchLastApproved(context.Context, *FetchLastApprovedRequest) (*LastApprovedResponse, error)
	CashbookFetchSalesReport(context.Context, *FetchSalesReportRequest) (*SalesReportResponseArray, error)
	CashbookFetchReport(context.Context, *FetchReportRequest) (*FetchReportResponse, error)
	CashbookHandleReport(context.Context, *HandleReportRequest) (*LastApprovedResponseObj, error)
	CashbookFetchMonthlyShopReport(context.Context, *FetchReportRequest) (*CommonResponseObj, error)
	CurrentReport(context.Context, *FetchReportRequest) (*CommonResponseObj, error)
	CashbookApproveExpense(context.Context, *CashbookApproveExpenseRequest) (*ExpenseSingleResponse, error)
	CashbookCreateExpense(context.Context, *CashbookCreateExpenseRequest) (*ExpenseSingleResponse, error)
	CashbookFindAllExpense(context.Context, *EmptyRequest) (*ExpenseRepeatedResponse, error)
	CashbookFindOneExpense(context.Context, *CashbookIdRequest) (*ExpenseSingleResponse, error)
	CashbookDeleteOneExpense(context.Context, *CashbookIdRequest) (*ExpenseSingleResponse, error)
	CashbookUpdateOneExpense(context.Context, *CashbookCreateExpenseRequest) (*ExpenseSingleResponse, error)
	CashbookFindAllBranchExpense(context.Context, *BranchRequest) (*ExpenseRepeatedResponse, error)
	CashbookCreateExpenseType(context.Context, *CashbookCreateExpenseTypeRequest) (*ExpenseTypeSingleResponse, error)
	CashbookFindAllExpenseType(context.Context, *EmptyRequest) (*ExpenseTypeRepeatedResponse, error)
	CashbookApproveCashIn(context.Context, *CashbookApproveCashInOutRequest) (*CashInOutSingleResponse, error)
	CashbookCreateCashIn(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error)
	CashbookUpdateCashIn(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error)
	CashbookDeleteOneCashIn(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error)
	CashbookFindOneCashIn(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error)
	CashbookFindAllCashIn(context.Context, *EmptyRequest) (*CashInOutRepeatedResponse, error)
	CashbookFindAllBranchCashIn(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error)
	FindAllBranchApprovedCashinWDate(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error)
	FindAllBranchPendingCashinWDate(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error)
	CashbookApproveCashOut(context.Context, *CashbookApproveCashInOutRequest) (*CashInOutSingleResponse, error)
	CashbookCreateCashOut(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error)
	CashbookUpdateCashOut(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error)
	CashbookDeleteOneCashOut(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error)
	CashbookFindOneCashOut(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error)
	CashbookFindAllCashOut(context.Context, *EmptyRequest) (*CashInOutRepeatedResponse, error)
	CashbookFindAllBranchCashOut(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error)
	HandleCreatePawaPay(context.Context, *CreatePawapayRequest) (*CommonResponseObj, error)
	HandleCreateBulkPawaPay(context.Context, *CreateBulkPawapayRequest) (*CommonResponseArray, error)
	HandleFetchPawaPay(context.Context, *FetchPawapayRequest) (*CommonResponseArray, error)
	HandlePawaPayResendCallback(context.Context, *FetchPawapayRequest) (*CommonResponseObj, error)
	HandlePawaPayBalances(context.Context, *PawapayCountryRequest) (*CommonResponseArray, error)
	HandlePawaPayCountryBalances(context.Context, *PawapayCountryRequest) (*CommonResponseArray, error)
	HandlePawaPayPredCorr(context.Context, *PawapayPredCorrRequest) (*CommonResponseObj, error)
	HandlePawaPayToolkit(context.Context, *PawapayToolkitRequest) (*CommonResponseArray, error)
	HandlePawaPayActiveConf(context.Context, *PawapayCountryRequest) (*CommonResponseObj, error)
	CreateVirtualAccount(context.Context, *WayaBankRequest) (*CommonResponseObj, error)
	WayabankAccountEnquiry(context.Context, *WayaBankRequest) (*CommonResponseObj, error)
	StkDepositNotification(context.Context, *StkTransactionRequest) (*CommonResponseObj, error)
	StkWithdrawNotification(context.Context, *StkTransactionRequest) (*CommonResponseObj, error)
	StkStatusNotification(context.Context, *StkTransactionRequest) (*CommonResponseObj, error)
	StkRegisterUrl(context.Context, *StkRegisterUrlRequest) (*CommonResponseObj, error)
	HandleWayaQuickInit(context.Context, *WayaQuickRequest) (*CommonResponseObj, error)
	HandleWayaQuickVerify(context.Context, *WayaQuickRequest) (*CommonResponseObj, error)
	FetchUsersWithdrawal(context.Context, *FetchUsersWithdrawalRequest) (*CommonResponseArray, error)
	GetBalance(context.Context, *GetBalanceRequest) (*WalletResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*WalletResponse, error)
	FetchBetRange(context.Context, *FetchBetRangeRequest) (*FetchBetRangeResponse, error)
	FetchPlayerDeposit(context.Context, *FetchPlayerDepositRequest) (*WalletResponse, error)
	FetchDepositRange(context.Context, *FetchDepositRangeRequest) (*FetchDepositRangeResponse, error)
	FetchDepositCount(context.Context, *FetchDepositCountRequest) (*FetchDepositCountResponse, error)
	CreditUser(context.Context, *CreditUserRequest) (*WalletResponse, error)
	AwardBonusWinning(context.Context, *CreditUserRequest) (*WalletResponse, error)
	DebitUser(context.Context, *DebitUserRequest) (*WalletResponse, error)
	InititateDeposit(context.Context, *InitiateDepositRequest) (*InitiateDepositResponse, error)
	VerifyDeposit(context.Context, *VerifyDepositRequest) (*VerifyDepositResponse, error)
	RequestWithdrawal(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	VerifyBankAccount(context.Context, *VerifyBankAccountRequest) (*VerifyBankAccountResponse, error)
	ListBanks(context.Context, *EmptyRequest) (*CommonResponseArray, error)
	GetTransactions(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	GetPaymentMethods(context.Context, *GetPaymentMethodRequest) (*GetPaymentMethodResponse, error)
	SavePaymentMethod(context.Context, *PaymentMethodRequest) (*PaymentMethodResponse, error)
	PaystackWebhook(context.Context, *PaystackWebhookRequest) (*WebhookResponse, error)
	MonnifyWebhook(context.Context, *MonnifyWebhookRequest) (*WebhookResponse, error)
	OpayDepositWebhook(context.Context, *OpayWebhookRequest) (*OpayWebhookResponse, error)
	OpayLookUpWebhook(context.Context, *OpayWebhookRequest) (*OpayWebhookResponse, error)
	ListWithdrawals(context.Context, *ListWithdrawalRequests) (*ListWithdrawalRequestResponse, error)
	ListDeposits(context.Context, *ListDepositRequests) (*PaginationResponse, error)
	UserTransactions(context.Context, *UserTransactionRequest) (*UserTransactionResponse, error)
	UpdateWithdrawal(context.Context, *UpdateWithdrawalRequest) (*CommonResponseObj, error)
	GetPlayerWalletData(context.Context, *GetBalanceRequest) (*PlayerWalletData, error)
	DeletePlayerData(context.Context, *IdRequest) (*CommonResponseObj, error)
	GetUserAccounts(context.Context, *GetBalanceRequest) (*GetUserAccountsResponse, error)
	GetNetworkBalance(context.Context, *GetNetworkBalanceRequest) (*GetNetworkBalanceResponse, error)
	GetMoneyTransaction(context.Context, *GetTransactionsRequest) (*CommonResponseObj, error)
	GetSystemTransaction(context.Context, *GetTransactionsRequest) (*CommonResponseObj, error)
	// RETAIL SERVICES
	WalletTransfer(context.Context, *WalletTransferRequest) (*CommonResponseObj, error)
	ValidateDepositCode(context.Context, *ValidateTransactionRequest) (*CommonResponseObj, error)
	ProcessShopDeposit(context.Context, *ProcessRetailTransaction) (*CommonResponseObj, error)
	ValidateWithdrawalCode(context.Context, *ValidateTransactionRequest) (*CommonResponseObj, error)
	ProcessShopWithdrawal(context.Context, *ProcessRetailTransaction) (*CommonResponseObj, error)
	DebitAgentBalance(context.Context, *DebitUserRequest) (*CommonResponseObj, error)
	FlutterWaveWebhook(context.Context, *FlutterwaveWebhookRequest) (*WebhookResponse, error)
	KorapayWebhook(context.Context, *KoraPayWebhookRequest) (*WebhookResponse, error)
	TigoWebhook(context.Context, *TigoWebhookRequest) (*TigoResponse, error)
	PawapayCallback(context.Context, *PawapayRequest) (*PawapayResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) CashbookVerifyFinalTransaction(context.Context, *FetchLastApprovedRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookVerifyFinalTransaction not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFetchLastApproved(context.Context, *FetchLastApprovedRequest) (*LastApprovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFetchLastApproved not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFetchSalesReport(context.Context, *FetchSalesReportRequest) (*SalesReportResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFetchSalesReport not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFetchReport(context.Context, *FetchReportRequest) (*FetchReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFetchReport not implemented")
}
func (UnimplementedWalletServiceServer) CashbookHandleReport(context.Context, *HandleReportRequest) (*LastApprovedResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookHandleReport not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFetchMonthlyShopReport(context.Context, *FetchReportRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFetchMonthlyShopReport not implemented")
}
func (UnimplementedWalletServiceServer) CurrentReport(context.Context, *FetchReportRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentReport not implemented")
}
func (UnimplementedWalletServiceServer) CashbookApproveExpense(context.Context, *CashbookApproveExpenseRequest) (*ExpenseSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookApproveExpense not implemented")
}
func (UnimplementedWalletServiceServer) CashbookCreateExpense(context.Context, *CashbookCreateExpenseRequest) (*ExpenseSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookCreateExpense not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindAllExpense(context.Context, *EmptyRequest) (*ExpenseRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindAllExpense not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindOneExpense(context.Context, *CashbookIdRequest) (*ExpenseSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindOneExpense not implemented")
}
func (UnimplementedWalletServiceServer) CashbookDeleteOneExpense(context.Context, *CashbookIdRequest) (*ExpenseSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookDeleteOneExpense not implemented")
}
func (UnimplementedWalletServiceServer) CashbookUpdateOneExpense(context.Context, *CashbookCreateExpenseRequest) (*ExpenseSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookUpdateOneExpense not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindAllBranchExpense(context.Context, *BranchRequest) (*ExpenseRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindAllBranchExpense not implemented")
}
func (UnimplementedWalletServiceServer) CashbookCreateExpenseType(context.Context, *CashbookCreateExpenseTypeRequest) (*ExpenseTypeSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookCreateExpenseType not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindAllExpenseType(context.Context, *EmptyRequest) (*ExpenseTypeRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindAllExpenseType not implemented")
}
func (UnimplementedWalletServiceServer) CashbookApproveCashIn(context.Context, *CashbookApproveCashInOutRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookApproveCashIn not implemented")
}
func (UnimplementedWalletServiceServer) CashbookCreateCashIn(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookCreateCashIn not implemented")
}
func (UnimplementedWalletServiceServer) CashbookUpdateCashIn(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookUpdateCashIn not implemented")
}
func (UnimplementedWalletServiceServer) CashbookDeleteOneCashIn(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookDeleteOneCashIn not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindOneCashIn(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindOneCashIn not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindAllCashIn(context.Context, *EmptyRequest) (*CashInOutRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindAllCashIn not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindAllBranchCashIn(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindAllBranchCashIn not implemented")
}
func (UnimplementedWalletServiceServer) FindAllBranchApprovedCashinWDate(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllBranchApprovedCashinWDate not implemented")
}
func (UnimplementedWalletServiceServer) FindAllBranchPendingCashinWDate(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllBranchPendingCashinWDate not implemented")
}
func (UnimplementedWalletServiceServer) CashbookApproveCashOut(context.Context, *CashbookApproveCashInOutRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookApproveCashOut not implemented")
}
func (UnimplementedWalletServiceServer) CashbookCreateCashOut(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookCreateCashOut not implemented")
}
func (UnimplementedWalletServiceServer) CashbookUpdateCashOut(context.Context, *CashbookCreateCashInOutRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookUpdateCashOut not implemented")
}
func (UnimplementedWalletServiceServer) CashbookDeleteOneCashOut(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookDeleteOneCashOut not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindOneCashOut(context.Context, *CashbookIdRequest) (*CashInOutSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindOneCashOut not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindAllCashOut(context.Context, *EmptyRequest) (*CashInOutRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindAllCashOut not implemented")
}
func (UnimplementedWalletServiceServer) CashbookFindAllBranchCashOut(context.Context, *BranchRequest) (*CashInOutRepeatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashbookFindAllBranchCashOut not implemented")
}
func (UnimplementedWalletServiceServer) HandleCreatePawaPay(context.Context, *CreatePawapayRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCreatePawaPay not implemented")
}
func (UnimplementedWalletServiceServer) HandleCreateBulkPawaPay(context.Context, *CreateBulkPawapayRequest) (*CommonResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCreateBulkPawaPay not implemented")
}
func (UnimplementedWalletServiceServer) HandleFetchPawaPay(context.Context, *FetchPawapayRequest) (*CommonResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFetchPawaPay not implemented")
}
func (UnimplementedWalletServiceServer) HandlePawaPayResendCallback(context.Context, *FetchPawapayRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePawaPayResendCallback not implemented")
}
func (UnimplementedWalletServiceServer) HandlePawaPayBalances(context.Context, *PawapayCountryRequest) (*CommonResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePawaPayBalances not implemented")
}
func (UnimplementedWalletServiceServer) HandlePawaPayCountryBalances(context.Context, *PawapayCountryRequest) (*CommonResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePawaPayCountryBalances not implemented")
}
func (UnimplementedWalletServiceServer) HandlePawaPayPredCorr(context.Context, *PawapayPredCorrRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePawaPayPredCorr not implemented")
}
func (UnimplementedWalletServiceServer) HandlePawaPayToolkit(context.Context, *PawapayToolkitRequest) (*CommonResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePawaPayToolkit not implemented")
}
func (UnimplementedWalletServiceServer) HandlePawaPayActiveConf(context.Context, *PawapayCountryRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePawaPayActiveConf not implemented")
}
func (UnimplementedWalletServiceServer) CreateVirtualAccount(context.Context, *WayaBankRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualAccount not implemented")
}
func (UnimplementedWalletServiceServer) WayabankAccountEnquiry(context.Context, *WayaBankRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WayabankAccountEnquiry not implemented")
}
func (UnimplementedWalletServiceServer) StkDepositNotification(context.Context, *StkTransactionRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StkDepositNotification not implemented")
}
func (UnimplementedWalletServiceServer) StkWithdrawNotification(context.Context, *StkTransactionRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StkWithdrawNotification not implemented")
}
func (UnimplementedWalletServiceServer) StkStatusNotification(context.Context, *StkTransactionRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StkStatusNotification not implemented")
}
func (UnimplementedWalletServiceServer) StkRegisterUrl(context.Context, *StkRegisterUrlRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StkRegisterUrl not implemented")
}
func (UnimplementedWalletServiceServer) HandleWayaQuickInit(context.Context, *WayaQuickRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleWayaQuickInit not implemented")
}
func (UnimplementedWalletServiceServer) HandleWayaQuickVerify(context.Context, *WayaQuickRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleWayaQuickVerify not implemented")
}
func (UnimplementedWalletServiceServer) FetchUsersWithdrawal(context.Context, *FetchUsersWithdrawalRequest) (*CommonResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUsersWithdrawal not implemented")
}
func (UnimplementedWalletServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedWalletServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServiceServer) FetchBetRange(context.Context, *FetchBetRangeRequest) (*FetchBetRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBetRange not implemented")
}
func (UnimplementedWalletServiceServer) FetchPlayerDeposit(context.Context, *FetchPlayerDepositRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerDeposit not implemented")
}
func (UnimplementedWalletServiceServer) FetchDepositRange(context.Context, *FetchDepositRangeRequest) (*FetchDepositRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDepositRange not implemented")
}
func (UnimplementedWalletServiceServer) FetchDepositCount(context.Context, *FetchDepositCountRequest) (*FetchDepositCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDepositCount not implemented")
}
func (UnimplementedWalletServiceServer) CreditUser(context.Context, *CreditUserRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditUser not implemented")
}
func (UnimplementedWalletServiceServer) AwardBonusWinning(context.Context, *CreditUserRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardBonusWinning not implemented")
}
func (UnimplementedWalletServiceServer) DebitUser(context.Context, *DebitUserRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebitUser not implemented")
}
func (UnimplementedWalletServiceServer) InititateDeposit(context.Context, *InitiateDepositRequest) (*InitiateDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InititateDeposit not implemented")
}
func (UnimplementedWalletServiceServer) VerifyDeposit(context.Context, *VerifyDepositRequest) (*VerifyDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDeposit not implemented")
}
func (UnimplementedWalletServiceServer) RequestWithdrawal(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithdrawal not implemented")
}
func (UnimplementedWalletServiceServer) VerifyBankAccount(context.Context, *VerifyBankAccountRequest) (*VerifyBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBankAccount not implemented")
}
func (UnimplementedWalletServiceServer) ListBanks(context.Context, *EmptyRequest) (*CommonResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBanks not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactions(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedWalletServiceServer) GetPaymentMethods(context.Context, *GetPaymentMethodRequest) (*GetPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethods not implemented")
}
func (UnimplementedWalletServiceServer) SavePaymentMethod(context.Context, *PaymentMethodRequest) (*PaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePaymentMethod not implemented")
}
func (UnimplementedWalletServiceServer) PaystackWebhook(context.Context, *PaystackWebhookRequest) (*WebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaystackWebhook not implemented")
}
func (UnimplementedWalletServiceServer) MonnifyWebhook(context.Context, *MonnifyWebhookRequest) (*WebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonnifyWebhook not implemented")
}
func (UnimplementedWalletServiceServer) OpayDepositWebhook(context.Context, *OpayWebhookRequest) (*OpayWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpayDepositWebhook not implemented")
}
func (UnimplementedWalletServiceServer) OpayLookUpWebhook(context.Context, *OpayWebhookRequest) (*OpayWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpayLookUpWebhook not implemented")
}
func (UnimplementedWalletServiceServer) ListWithdrawals(context.Context, *ListWithdrawalRequests) (*ListWithdrawalRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawals not implemented")
}
func (UnimplementedWalletServiceServer) ListDeposits(context.Context, *ListDepositRequests) (*PaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeposits not implemented")
}
func (UnimplementedWalletServiceServer) UserTransactions(context.Context, *UserTransactionRequest) (*UserTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTransactions not implemented")
}
func (UnimplementedWalletServiceServer) UpdateWithdrawal(context.Context, *UpdateWithdrawalRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawal not implemented")
}
func (UnimplementedWalletServiceServer) GetPlayerWalletData(context.Context, *GetBalanceRequest) (*PlayerWalletData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWalletData not implemented")
}
func (UnimplementedWalletServiceServer) DeletePlayerData(context.Context, *IdRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayerData not implemented")
}
func (UnimplementedWalletServiceServer) GetUserAccounts(context.Context, *GetBalanceRequest) (*GetUserAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccounts not implemented")
}
func (UnimplementedWalletServiceServer) GetNetworkBalance(context.Context, *GetNetworkBalanceRequest) (*GetNetworkBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkBalance not implemented")
}
func (UnimplementedWalletServiceServer) GetMoneyTransaction(context.Context, *GetTransactionsRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoneyTransaction not implemented")
}
func (UnimplementedWalletServiceServer) GetSystemTransaction(context.Context, *GetTransactionsRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemTransaction not implemented")
}
func (UnimplementedWalletServiceServer) WalletTransfer(context.Context, *WalletTransferRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTransfer not implemented")
}
func (UnimplementedWalletServiceServer) ValidateDepositCode(context.Context, *ValidateTransactionRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDepositCode not implemented")
}
func (UnimplementedWalletServiceServer) ProcessShopDeposit(context.Context, *ProcessRetailTransaction) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessShopDeposit not implemented")
}
func (UnimplementedWalletServiceServer) ValidateWithdrawalCode(context.Context, *ValidateTransactionRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateWithdrawalCode not implemented")
}
func (UnimplementedWalletServiceServer) ProcessShopWithdrawal(context.Context, *ProcessRetailTransaction) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessShopWithdrawal not implemented")
}
func (UnimplementedWalletServiceServer) DebitAgentBalance(context.Context, *DebitUserRequest) (*CommonResponseObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebitAgentBalance not implemented")
}
func (UnimplementedWalletServiceServer) FlutterWaveWebhook(context.Context, *FlutterwaveWebhookRequest) (*WebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlutterWaveWebhook not implemented")
}
func (UnimplementedWalletServiceServer) KorapayWebhook(context.Context, *KoraPayWebhookRequest) (*WebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KorapayWebhook not implemented")
}
func (UnimplementedWalletServiceServer) TigoWebhook(context.Context, *TigoWebhookRequest) (*TigoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TigoWebhook not implemented")
}
func (UnimplementedWalletServiceServer) PawapayCallback(context.Context, *PawapayRequest) (*PawapayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PawapayCallback not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_CashbookVerifyFinalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLastApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookVerifyFinalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookVerifyFinalTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookVerifyFinalTransaction(ctx, req.(*FetchLastApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFetchLastApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLastApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFetchLastApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFetchLastApproved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFetchLastApproved(ctx, req.(*FetchLastApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFetchSalesReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSalesReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFetchSalesReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFetchSalesReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFetchSalesReport(ctx, req.(*FetchSalesReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFetchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFetchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFetchReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFetchReport(ctx, req.(*FetchReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookHandleReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookHandleReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookHandleReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookHandleReport(ctx, req.(*HandleReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFetchMonthlyShopReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFetchMonthlyShopReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFetchMonthlyShopReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFetchMonthlyShopReport(ctx, req.(*FetchReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CurrentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CurrentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CurrentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CurrentReport(ctx, req.(*FetchReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookApproveExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookApproveExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookApproveExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookApproveExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookApproveExpense(ctx, req.(*CashbookApproveExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookCreateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookCreateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookCreateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookCreateExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookCreateExpense(ctx, req.(*CashbookCreateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindAllExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindAllExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindAllExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindAllExpense(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindOneExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindOneExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindOneExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindOneExpense(ctx, req.(*CashbookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookDeleteOneExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookDeleteOneExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookDeleteOneExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookDeleteOneExpense(ctx, req.(*CashbookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookUpdateOneExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookCreateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookUpdateOneExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookUpdateOneExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookUpdateOneExpense(ctx, req.(*CashbookCreateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindAllBranchExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindAllBranchExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindAllBranchExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindAllBranchExpense(ctx, req.(*BranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookCreateExpenseType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookCreateExpenseTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookCreateExpenseType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookCreateExpenseType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookCreateExpenseType(ctx, req.(*CashbookCreateExpenseTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindAllExpenseType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindAllExpenseType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindAllExpenseType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindAllExpenseType(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookApproveCashIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookApproveCashInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookApproveCashIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookApproveCashIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookApproveCashIn(ctx, req.(*CashbookApproveCashInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookCreateCashIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookCreateCashInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookCreateCashIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookCreateCashIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookCreateCashIn(ctx, req.(*CashbookCreateCashInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookUpdateCashIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookCreateCashInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookUpdateCashIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookUpdateCashIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookUpdateCashIn(ctx, req.(*CashbookCreateCashInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookDeleteOneCashIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookDeleteOneCashIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookDeleteOneCashIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookDeleteOneCashIn(ctx, req.(*CashbookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindOneCashIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindOneCashIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindOneCashIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindOneCashIn(ctx, req.(*CashbookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindAllCashIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindAllCashIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindAllCashIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindAllCashIn(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindAllBranchCashIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindAllBranchCashIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindAllBranchCashIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindAllBranchCashIn(ctx, req.(*BranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FindAllBranchApprovedCashinWDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FindAllBranchApprovedCashinWDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FindAllBranchApprovedCashinWDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FindAllBranchApprovedCashinWDate(ctx, req.(*BranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FindAllBranchPendingCashinWDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FindAllBranchPendingCashinWDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FindAllBranchPendingCashinWDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FindAllBranchPendingCashinWDate(ctx, req.(*BranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookApproveCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookApproveCashInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookApproveCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookApproveCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookApproveCashOut(ctx, req.(*CashbookApproveCashInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookCreateCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookCreateCashInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookCreateCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookCreateCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookCreateCashOut(ctx, req.(*CashbookCreateCashInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookUpdateCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookCreateCashInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookUpdateCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookUpdateCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookUpdateCashOut(ctx, req.(*CashbookCreateCashInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookDeleteOneCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookDeleteOneCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookDeleteOneCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookDeleteOneCashOut(ctx, req.(*CashbookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindOneCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashbookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindOneCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindOneCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindOneCashOut(ctx, req.(*CashbookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindAllCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindAllCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindAllCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindAllCashOut(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CashbookFindAllBranchCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CashbookFindAllBranchCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CashbookFindAllBranchCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CashbookFindAllBranchCashOut(ctx, req.(*BranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandleCreatePawaPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePawapayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandleCreatePawaPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandleCreatePawaPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandleCreatePawaPay(ctx, req.(*CreatePawapayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandleCreateBulkPawaPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBulkPawapayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandleCreateBulkPawaPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandleCreateBulkPawaPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandleCreateBulkPawaPay(ctx, req.(*CreateBulkPawapayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandleFetchPawaPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPawapayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandleFetchPawaPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandleFetchPawaPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandleFetchPawaPay(ctx, req.(*FetchPawapayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandlePawaPayResendCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPawapayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandlePawaPayResendCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandlePawaPayResendCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandlePawaPayResendCallback(ctx, req.(*FetchPawapayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandlePawaPayBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PawapayCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandlePawaPayBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandlePawaPayBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandlePawaPayBalances(ctx, req.(*PawapayCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandlePawaPayCountryBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PawapayCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandlePawaPayCountryBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandlePawaPayCountryBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandlePawaPayCountryBalances(ctx, req.(*PawapayCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandlePawaPayPredCorr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PawapayPredCorrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandlePawaPayPredCorr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandlePawaPayPredCorr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandlePawaPayPredCorr(ctx, req.(*PawapayPredCorrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandlePawaPayToolkit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PawapayToolkitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandlePawaPayToolkit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandlePawaPayToolkit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandlePawaPayToolkit(ctx, req.(*PawapayToolkitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandlePawaPayActiveConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PawapayCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandlePawaPayActiveConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandlePawaPayActiveConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandlePawaPayActiveConf(ctx, req.(*PawapayCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateVirtualAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayaBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateVirtualAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateVirtualAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateVirtualAccount(ctx, req.(*WayaBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WayabankAccountEnquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayaBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WayabankAccountEnquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_WayabankAccountEnquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WayabankAccountEnquiry(ctx, req.(*WayaBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StkDepositNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StkTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StkDepositNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_StkDepositNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StkDepositNotification(ctx, req.(*StkTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StkWithdrawNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StkTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StkWithdrawNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_StkWithdrawNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StkWithdrawNotification(ctx, req.(*StkTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StkStatusNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StkTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StkStatusNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_StkStatusNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StkStatusNotification(ctx, req.(*StkTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StkRegisterUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StkRegisterUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StkRegisterUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_StkRegisterUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StkRegisterUrl(ctx, req.(*StkRegisterUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandleWayaQuickInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayaQuickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandleWayaQuickInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandleWayaQuickInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandleWayaQuickInit(ctx, req.(*WayaQuickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HandleWayaQuickVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayaQuickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HandleWayaQuickVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HandleWayaQuickVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HandleWayaQuickVerify(ctx, req.(*WayaQuickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FetchUsersWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUsersWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FetchUsersWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FetchUsersWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FetchUsersWithdrawal(ctx, req.(*FetchUsersWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FetchBetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBetRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FetchBetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FetchBetRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FetchBetRange(ctx, req.(*FetchBetRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FetchPlayerDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FetchPlayerDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FetchPlayerDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FetchPlayerDeposit(ctx, req.(*FetchPlayerDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FetchDepositRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDepositRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FetchDepositRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FetchDepositRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FetchDepositRange(ctx, req.(*FetchDepositRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FetchDepositCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDepositCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FetchDepositCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FetchDepositCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FetchDepositCount(ctx, req.(*FetchDepositCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreditUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreditUser(ctx, req.(*CreditUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AwardBonusWinning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AwardBonusWinning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_AwardBonusWinning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AwardBonusWinning(ctx, req.(*CreditUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DebitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DebitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DebitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DebitUser(ctx, req.(*DebitUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_InititateDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).InititateDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_InititateDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).InititateDeposit(ctx, req.(*InitiateDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_VerifyDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).VerifyDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_VerifyDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).VerifyDeposit(ctx, req.(*VerifyDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RequestWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RequestWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_RequestWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RequestWithdrawal(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_VerifyBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).VerifyBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_VerifyBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).VerifyBankAccount(ctx, req.(*VerifyBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListBanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListBanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ListBanks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListBanks(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactions(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetPaymentMethods(ctx, req.(*GetPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SavePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SavePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SavePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SavePaymentMethod(ctx, req.(*PaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PaystackWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaystackWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PaystackWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_PaystackWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PaystackWebhook(ctx, req.(*PaystackWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_MonnifyWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonnifyWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).MonnifyWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_MonnifyWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).MonnifyWebhook(ctx, req.(*MonnifyWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_OpayDepositWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpayWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).OpayDepositWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_OpayDepositWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).OpayDepositWebhook(ctx, req.(*OpayWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_OpayLookUpWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpayWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).OpayLookUpWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_OpayLookUpWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).OpayLookUpWebhook(ctx, req.(*OpayWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawalRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ListWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListWithdrawals(ctx, req.(*ListWithdrawalRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ListDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListDeposits(ctx, req.(*ListDepositRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_UserTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).UserTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_UserTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).UserTransactions(ctx, req.(*UserTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_UpdateWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).UpdateWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_UpdateWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).UpdateWithdrawal(ctx, req.(*UpdateWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetPlayerWalletData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetPlayerWalletData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetPlayerWalletData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetPlayerWalletData(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeletePlayerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeletePlayerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DeletePlayerData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeletePlayerData(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetUserAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetUserAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetUserAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetUserAccounts(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetNetworkBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetNetworkBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetNetworkBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetNetworkBalance(ctx, req.(*GetNetworkBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetMoneyTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetMoneyTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetMoneyTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetMoneyTransaction(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetSystemTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetSystemTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetSystemTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetSystemTransaction(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WalletTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WalletTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_WalletTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WalletTransfer(ctx, req.(*WalletTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ValidateDepositCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ValidateDepositCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ValidateDepositCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ValidateDepositCode(ctx, req.(*ValidateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ProcessShopDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRetailTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ProcessShopDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ProcessShopDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ProcessShopDeposit(ctx, req.(*ProcessRetailTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ValidateWithdrawalCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ValidateWithdrawalCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ValidateWithdrawalCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ValidateWithdrawalCode(ctx, req.(*ValidateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ProcessShopWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRetailTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ProcessShopWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ProcessShopWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ProcessShopWithdrawal(ctx, req.(*ProcessRetailTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DebitAgentBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DebitAgentBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DebitAgentBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DebitAgentBalance(ctx, req.(*DebitUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FlutterWaveWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlutterwaveWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FlutterWaveWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_FlutterWaveWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FlutterWaveWebhook(ctx, req.(*FlutterwaveWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_KorapayWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KoraPayWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).KorapayWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_KorapayWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).KorapayWebhook(ctx, req.(*KoraPayWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_TigoWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TigoWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).TigoWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_TigoWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).TigoWebhook(ctx, req.(*TigoWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PawapayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PawapayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PawapayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_PawapayCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PawapayCallback(ctx, req.(*PawapayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CashbookVerifyFinalTransaction",
			Handler:    _WalletService_CashbookVerifyFinalTransaction_Handler,
		},
		{
			MethodName: "CashbookFetchLastApproved",
			Handler:    _WalletService_CashbookFetchLastApproved_Handler,
		},
		{
			MethodName: "CashbookFetchSalesReport",
			Handler:    _WalletService_CashbookFetchSalesReport_Handler,
		},
		{
			MethodName: "CashbookFetchReport",
			Handler:    _WalletService_CashbookFetchReport_Handler,
		},
		{
			MethodName: "CashbookHandleReport",
			Handler:    _WalletService_CashbookHandleReport_Handler,
		},
		{
			MethodName: "CashbookFetchMonthlyShopReport",
			Handler:    _WalletService_CashbookFetchMonthlyShopReport_Handler,
		},
		{
			MethodName: "CurrentReport",
			Handler:    _WalletService_CurrentReport_Handler,
		},
		{
			MethodName: "CashbookApproveExpense",
			Handler:    _WalletService_CashbookApproveExpense_Handler,
		},
		{
			MethodName: "CashbookCreateExpense",
			Handler:    _WalletService_CashbookCreateExpense_Handler,
		},
		{
			MethodName: "CashbookFindAllExpense",
			Handler:    _WalletService_CashbookFindAllExpense_Handler,
		},
		{
			MethodName: "CashbookFindOneExpense",
			Handler:    _WalletService_CashbookFindOneExpense_Handler,
		},
		{
			MethodName: "CashbookDeleteOneExpense",
			Handler:    _WalletService_CashbookDeleteOneExpense_Handler,
		},
		{
			MethodName: "CashbookUpdateOneExpense",
			Handler:    _WalletService_CashbookUpdateOneExpense_Handler,
		},
		{
			MethodName: "CashbookFindAllBranchExpense",
			Handler:    _WalletService_CashbookFindAllBranchExpense_Handler,
		},
		{
			MethodName: "CashbookCreateExpenseType",
			Handler:    _WalletService_CashbookCreateExpenseType_Handler,
		},
		{
			MethodName: "CashbookFindAllExpenseType",
			Handler:    _WalletService_CashbookFindAllExpenseType_Handler,
		},
		{
			MethodName: "CashbookApproveCashIn",
			Handler:    _WalletService_CashbookApproveCashIn_Handler,
		},
		{
			MethodName: "CashbookCreateCashIn",
			Handler:    _WalletService_CashbookCreateCashIn_Handler,
		},
		{
			MethodName: "CashbookUpdateCashIn",
			Handler:    _WalletService_CashbookUpdateCashIn_Handler,
		},
		{
			MethodName: "CashbookDeleteOneCashIn",
			Handler:    _WalletService_CashbookDeleteOneCashIn_Handler,
		},
		{
			MethodName: "CashbookFindOneCashIn",
			Handler:    _WalletService_CashbookFindOneCashIn_Handler,
		},
		{
			MethodName: "CashbookFindAllCashIn",
			Handler:    _WalletService_CashbookFindAllCashIn_Handler,
		},
		{
			MethodName: "CashbookFindAllBranchCashIn",
			Handler:    _WalletService_CashbookFindAllBranchCashIn_Handler,
		},
		{
			MethodName: "FindAllBranchApprovedCashinWDate",
			Handler:    _WalletService_FindAllBranchApprovedCashinWDate_Handler,
		},
		{
			MethodName: "FindAllBranchPendingCashinWDate",
			Handler:    _WalletService_FindAllBranchPendingCashinWDate_Handler,
		},
		{
			MethodName: "CashbookApproveCashOut",
			Handler:    _WalletService_CashbookApproveCashOut_Handler,
		},
		{
			MethodName: "CashbookCreateCashOut",
			Handler:    _WalletService_CashbookCreateCashOut_Handler,
		},
		{
			MethodName: "CashbookUpdateCashOut",
			Handler:    _WalletService_CashbookUpdateCashOut_Handler,
		},
		{
			MethodName: "CashbookDeleteOneCashOut",
			Handler:    _WalletService_CashbookDeleteOneCashOut_Handler,
		},
		{
			MethodName: "CashbookFindOneCashOut",
			Handler:    _WalletService_CashbookFindOneCashOut_Handler,
		},
		{
			MethodName: "CashbookFindAllCashOut",
			Handler:    _WalletService_CashbookFindAllCashOut_Handler,
		},
		{
			MethodName: "CashbookFindAllBranchCashOut",
			Handler:    _WalletService_CashbookFindAllBranchCashOut_Handler,
		},
		{
			MethodName: "HandleCreatePawaPay",
			Handler:    _WalletService_HandleCreatePawaPay_Handler,
		},
		{
			MethodName: "HandleCreateBulkPawaPay",
			Handler:    _WalletService_HandleCreateBulkPawaPay_Handler,
		},
		{
			MethodName: "HandleFetchPawaPay",
			Handler:    _WalletService_HandleFetchPawaPay_Handler,
		},
		{
			MethodName: "HandlePawaPayResendCallback",
			Handler:    _WalletService_HandlePawaPayResendCallback_Handler,
		},
		{
			MethodName: "HandlePawaPayBalances",
			Handler:    _WalletService_HandlePawaPayBalances_Handler,
		},
		{
			MethodName: "HandlePawaPayCountryBalances",
			Handler:    _WalletService_HandlePawaPayCountryBalances_Handler,
		},
		{
			MethodName: "HandlePawaPayPredCorr",
			Handler:    _WalletService_HandlePawaPayPredCorr_Handler,
		},
		{
			MethodName: "HandlePawaPayToolkit",
			Handler:    _WalletService_HandlePawaPayToolkit_Handler,
		},
		{
			MethodName: "HandlePawaPayActiveConf",
			Handler:    _WalletService_HandlePawaPayActiveConf_Handler,
		},
		{
			MethodName: "CreateVirtualAccount",
			Handler:    _WalletService_CreateVirtualAccount_Handler,
		},
		{
			MethodName: "WayabankAccountEnquiry",
			Handler:    _WalletService_WayabankAccountEnquiry_Handler,
		},
		{
			MethodName: "StkDepositNotification",
			Handler:    _WalletService_StkDepositNotification_Handler,
		},
		{
			MethodName: "StkWithdrawNotification",
			Handler:    _WalletService_StkWithdrawNotification_Handler,
		},
		{
			MethodName: "StkStatusNotification",
			Handler:    _WalletService_StkStatusNotification_Handler,
		},
		{
			MethodName: "StkRegisterUrl",
			Handler:    _WalletService_StkRegisterUrl_Handler,
		},
		{
			MethodName: "HandleWayaQuickInit",
			Handler:    _WalletService_HandleWayaQuickInit_Handler,
		},
		{
			MethodName: "HandleWayaQuickVerify",
			Handler:    _WalletService_HandleWayaQuickVerify_Handler,
		},
		{
			MethodName: "FetchUsersWithdrawal",
			Handler:    _WalletService_FetchUsersWithdrawal_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _WalletService_GetBalance_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _WalletService_CreateWallet_Handler,
		},
		{
			MethodName: "FetchBetRange",
			Handler:    _WalletService_FetchBetRange_Handler,
		},
		{
			MethodName: "FetchPlayerDeposit",
			Handler:    _WalletService_FetchPlayerDeposit_Handler,
		},
		{
			MethodName: "FetchDepositRange",
			Handler:    _WalletService_FetchDepositRange_Handler,
		},
		{
			MethodName: "FetchDepositCount",
			Handler:    _WalletService_FetchDepositCount_Handler,
		},
		{
			MethodName: "CreditUser",
			Handler:    _WalletService_CreditUser_Handler,
		},
		{
			MethodName: "AwardBonusWinning",
			Handler:    _WalletService_AwardBonusWinning_Handler,
		},
		{
			MethodName: "DebitUser",
			Handler:    _WalletService_DebitUser_Handler,
		},
		{
			MethodName: "InititateDeposit",
			Handler:    _WalletService_InititateDeposit_Handler,
		},
		{
			MethodName: "VerifyDeposit",
			Handler:    _WalletService_VerifyDeposit_Handler,
		},
		{
			MethodName: "RequestWithdrawal",
			Handler:    _WalletService_RequestWithdrawal_Handler,
		},
		{
			MethodName: "VerifyBankAccount",
			Handler:    _WalletService_VerifyBankAccount_Handler,
		},
		{
			MethodName: "ListBanks",
			Handler:    _WalletService_ListBanks_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _WalletService_GetTransactions_Handler,
		},
		{
			MethodName: "GetPaymentMethods",
			Handler:    _WalletService_GetPaymentMethods_Handler,
		},
		{
			MethodName: "SavePaymentMethod",
			Handler:    _WalletService_SavePaymentMethod_Handler,
		},
		{
			MethodName: "PaystackWebhook",
			Handler:    _WalletService_PaystackWebhook_Handler,
		},
		{
			MethodName: "MonnifyWebhook",
			Handler:    _WalletService_MonnifyWebhook_Handler,
		},
		{
			MethodName: "OpayDepositWebhook",
			Handler:    _WalletService_OpayDepositWebhook_Handler,
		},
		{
			MethodName: "OpayLookUpWebhook",
			Handler:    _WalletService_OpayLookUpWebhook_Handler,
		},
		{
			MethodName: "ListWithdrawals",
			Handler:    _WalletService_ListWithdrawals_Handler,
		},
		{
			MethodName: "ListDeposits",
			Handler:    _WalletService_ListDeposits_Handler,
		},
		{
			MethodName: "UserTransactions",
			Handler:    _WalletService_UserTransactions_Handler,
		},
		{
			MethodName: "UpdateWithdrawal",
			Handler:    _WalletService_UpdateWithdrawal_Handler,
		},
		{
			MethodName: "GetPlayerWalletData",
			Handler:    _WalletService_GetPlayerWalletData_Handler,
		},
		{
			MethodName: "DeletePlayerData",
			Handler:    _WalletService_DeletePlayerData_Handler,
		},
		{
			MethodName: "GetUserAccounts",
			Handler:    _WalletService_GetUserAccounts_Handler,
		},
		{
			MethodName: "GetNetworkBalance",
			Handler:    _WalletService_GetNetworkBalance_Handler,
		},
		{
			MethodName: "GetMoneyTransaction",
			Handler:    _WalletService_GetMoneyTransaction_Handler,
		},
		{
			MethodName: "GetSystemTransaction",
			Handler:    _WalletService_GetSystemTransaction_Handler,
		},
		{
			MethodName: "WalletTransfer",
			Handler:    _WalletService_WalletTransfer_Handler,
		},
		{
			MethodName: "ValidateDepositCode",
			Handler:    _WalletService_ValidateDepositCode_Handler,
		},
		{
			MethodName: "ProcessShopDeposit",
			Handler:    _WalletService_ProcessShopDeposit_Handler,
		},
		{
			MethodName: "ValidateWithdrawalCode",
			Handler:    _WalletService_ValidateWithdrawalCode_Handler,
		},
		{
			MethodName: "ProcessShopWithdrawal",
			Handler:    _WalletService_ProcessShopWithdrawal_Handler,
		},
		{
			MethodName: "DebitAgentBalance",
			Handler:    _WalletService_DebitAgentBalance_Handler,
		},
		{
			MethodName: "FlutterWaveWebhook",
			Handler:    _WalletService_FlutterWaveWebhook_Handler,
		},
		{
			MethodName: "KorapayWebhook",
			Handler:    _WalletService_KorapayWebhook_Handler,
		},
		{
			MethodName: "TigoWebhook",
			Handler:    _WalletService_TigoWebhook_Handler,
		},
		{
			MethodName: "PawapayCallback",
			Handler:    _WalletService_PawapayCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/wallet.proto",
}
